services:
  # Datadog Agent service
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: telecom_datadog_agent
    env_file:
      - .env.datadog
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE:-ap1.datadoghq.com}
      - DD_HOSTNAME=telecom-app
      - DD_ENV=${DD_ENV:-production}
      - DD_SERVICE=telecom-app
      - DD_VERSION=${DD_VERSION:-1.0.0}
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_PROCESS_AGENT_ENABLED=false
      - DD_SYSTEM_PROBE_ENABLED=false
      - DD_RUNTIME_SECURITY_CONFIG_ENABLED=false
      - DD_NETWORK_MONITORING_ENABLED=false
      - DD_COMPLIANCE_CONFIG_ENABLED=false
      - DD_ENABLE_SYSTEM_PROBE=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - ./datadog/datadog.yaml:/etc/datadog-agent/datadog.yaml:ro
      - datadog_run:/opt/datadog-agent/run:rw
    ports:
      - "8127:8126"  # APM traces
      - "8124:8125/udp"  # DogStatsD metrics
    networks:
      - telecom_network
    restart: unless-stopped
    labels:
      com.datadoghq.ad.logs: '[{"source": "datadog-agent", "service": "datadog-agent"}]'

  # Database service
  database:
    image: postgres:15-alpine
    container_name: telecom_database
    environment:
      POSTGRES_DB: telecom_db
      POSTGRES_USER: telecom_user
      POSTGRES_PASSWORD: telecom_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - telecom_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telecom_user -d telecom_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telecom_backend
    env_file:
      - .env.datadog
    environment:
      - FLASK_ENV=production
      - FLASK_PORT=5001
      - FLASK_HOST=0.0.0.0
      - DATABASE_URL=postgresql://telecom_user:telecom_password@database:5432/telecom_db
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGINS=http://localhost:3002,http://frontend:3002
      # Datadog configuration
      - DD_SERVICE=telecom-backend
      - DD_ENV=${DD_ENV:-production}
      - DD_VERSION=${DD_VERSION:-1.0.0}
      - DD_AGENT_HOST=datadog-agent
      - DD_TRACE_AGENT_PORT=8126
      - DD_DOGSTATSD_PORT=8125
      - DD_API_KEY=${DD_API_KEY}
      - DD_APP_KEY=${DD_APP_KEY}
    ports:
      - "5003:5001"
    volumes:
      - ./data:/app/data
      - backend_instance:/app/instance
    depends_on:
      database:
        condition: service_healthy
    networks:
      - telecom_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: telecom_frontend
    env_file:
      - .env.datadog
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://backend:5001/api
      - PORT=3002
      # Datadog configuration
      - DD_SERVICE=telecom-frontend
      - DD_ENV=${DD_ENV:-production}
      - DD_VERSION=${DD_VERSION:-1.0.0}
      - DD_AGENT_HOST=datadog-agent
      - DD_TRACE_AGENT_PORT=8126
      - DD_DOGSTATSD_PORT=8125
    ports:
      - "3002:3002"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - telecom_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: telecom_redis
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    networks:
      - telecom_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: telecom_nginx
    ports:
      - "8081:80"
      - "8444:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - telecom_network
    restart: unless-stopped

  # Test runner service
  test_runner:
    build:
      context: ./tests
      dockerfile: Dockerfile
    container_name: telecom_tests
    environment:
      - BACKEND_URL=http://backend:5001
      - FRONTEND_URL=http://frontend:3002
    volumes:
      - ./tests:/app/tests
      - test_reports:/app/reports
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - telecom_network
    profiles:
      - testing

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_instance:
    driver: local
  test_reports:
    driver: local
  datadog_run:
    driver: local

networks:
  telecom_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
